// This API provides access to current close-approach data for asteroid and comets in JPL’s SBDB
// Args include des, date-min, date-max, dist-max
// des - only data for the object matching this designation (e.g., 2015 AB or 141P or 433)
// date-min - exclude data earlier than this date YYYY-MM-DD
// date-max - exclude data later than this date YYYY-MM-DD
// dist-max - exclude data with an approach distance greater than this (in AU)


const sbdbURL = "https://ssd-api.jpl.nasa.gov/cad.api?"

const des = args[0]
const dateMin = args[1]
const dateMax = args[2]
const maxDist = args[3]

console.log(`Sending HTTP request to ${sbdbURL}des=${des}&date-min=${dateMin}&date-max=${dateMax}&dist-max=${maxDist}`)

const sbdbRequest = Functions.makeHttpRequest({
  url: sbdbURL,
  method: "GET",
  params: {
    des: des,
    "date-min": dateMin,
    "date-max": dateMax,
    "dist-max": maxDist,
  },
})

// response from sbdb
const sbdbResponse = await sbdbRequest

if (sbdbResponse.error) {
  console.error(geoCodingResponse.error)
  throw Error("Request failed, try checking the params provided")
}

console.log(sbdbResponse)

// getting the very first data of an asteroid
const reqData = sbdbResponse.data.data[0]

// selecting the required output
const myData = {
  orbitId: reqData[1],
  closeTimeApproach: reqData[3],
  dist: reqData[4],
  relativeVelocity: reqData[7]
}
// Define constants for the API endpoint and request parameters
const API_ENDPOINT = "https://maps.googleapis.com/maps/api/distancematrix/json"
const DEPARTURE_TIME = "now"
const RETURN_PROPERTIES = ["distance", "duration", "duration_in_traffic"]

// Get the arguments from the request config
const origin = args[0] // e.g. "New York City"
const destination = args[1] // e.g. "Washington DC"

// Get the Google Maps API Key from the environment variables
const apiKey = secrets.apiKey
if (
  !apiKey ||
  apiKey ===
    "Your Google Maps API key (get one: https://developers.google.com/maps/documentation/distance-matrix/start)"
) {
  throw new Error("GOOGLE_MAPS_API_KEY environment variable not set or invalid")
}

// build HTTP request object
const requestParams = {
  url: `${API_ENDPOINT}?departure_time=${DEPARTURE_TIME}`,
  params: {
    origins: origin,
    destinations: destination,
    key: apiKey,
  },
}

// Make the HTTP request to the Google Maps API
const googleMapsRequest = Functions.makeHttpRequest(requestParams)
let response

try {
  response = await googleMapsRequest
} catch (error) {
  throw new Error(`Google Maps API request failed: ${error.message}`)
}

// Check if the response status is OK
if (response.status !== 200) {
  throw new Error(`Google Maps API returned an error: ${response.statusText}`)
}

// Extract the relevant data from the response
const data = response.data

// Check if the response contains the expected properties
if (!data.rows || !data.rows[0].elements || !data.rows[0].elements[0]) {
  throw new Error("Google Maps API response is missing expected data")
}

// Extract the distance, standard duration, and duration in traffic from the response
const distance = data.rows[0].elements[0].distance.value
const stdDuration = data.rows[0].elements[0].duration.value
const duration_in_traffic = data.rows[0].elements[0].duration_in_traffic.value

// Log the results for debugging purposes
console.log(`Distance: ${distance / 1000} km`)
console.log(`std duration: ${stdDuration / 60} min`)
console.log(`duration_in_traffic: ${duration_in_traffic / 60} min`)
console.log(`time in traffic jam: ${(duration_in_traffic - stdDuration) / 60} min`)

// Encode and return the distance (in meters), standard duration (in seconds), and duration in traffic (in seconds) as a string which can be parsed and split
return Functions.encodeString(`${distance},${stdDuration},${duration_in_traffic}`)

// Use JSON.stringify() to convert from JSON object to JSON string
// Finally, use the helper Functions.encodeString() to encode from string to bytes
return Functions.encodeString(JSON.stringify(myData))

const config = {
  url: "https://worldtimeapi.org/api/timezone/Etc/UTC",
};

const response = await Functions.makeHttpRequest(config);

const datetime = response.data.utc_datetime;

return Functions.encodeString(datetime);

name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag my-image-name:$(date +%s)

// This API provides access to current close-approach data for asteroid and comets in JPL’s SBDB
// Args include des, date-min, date-max, dist-max
// des - only data for the object matching this designation (e.g., 2015 AB or 141P or 433)
// date-min - exclude data earlier than this date YYYY-MM-DD
// date-max - exclude data later than this date YYYY-MM-DD
// dist-max - exclude data with an approach distance greater than this (in AU)


const sbdbURL = "https://ssd-api.jpl.nasa.gov/cad.api?"

const des = args[0]
const dateMin = args[1]
const dateMax = args[2]
const maxDist = args[3]

console.log(`Sending HTTP request to ${sbdbURL}des=${des}&date-min=${dateMin}&date-max=${dateMax}&dist-max=${maxDist}`)

const sbdbRequest = Functions.makeHttpRequest({
  url: sbdbURL,
  method: "GET",
  params: {
    des: des,
    "date-min": dateMin,
    "date-max": dateMax,
    "dist-max": maxDist,
  },
})

// response from sbdb
const sbdbResponse = await sbdbRequest

if (sbdbResponse.error) {
  console.error(geoCodingResponse.error)
  throw Error("Request failed, try checking the params provided")
}

console.log(sbdbResponse)

// getting the very first data of an asteroid
const reqData = sbdbResponse.data.data[0]

// selecting the required output
const myData = {
  orbitId: reqData[1],
  closeTimeApproach: reqData[3],
  dist: reqData[4],
  relativeVelocity: reqData[7]
}

// Use JSON.stringify() to convert from JSON object to JSON string
// Finally, use the helper Functions.encodeString() to encode from string to bytes
return Functions.encodeString(JSON.stringify(myData))
