{
//** Begin Function
//** args = [videoOrChannelId, ownerWalletAddress, type]
const videoOrChannelId = args[0]; // video or channel id get from youtube eg. xyFa2amJJoY
const ownerWalletAddress = args[1]; // owner wallet address eg. 0x1282401445452436b4094E86619B2Fd2fAD464d8
const type = args[2]; // "video" | "channel"

// Youtube API key get from https://console.cloud.google.com/apis/dashboard
if (!secrets.apiKey) {
  throw Error(
    "YOUTUBE_API_KEY required"
  );
}

// Youtube API request
const youtubeRequest = Functions.makeHttpRequest({
  url: `https://youtube.googleapis.com/youtube/v3/${type}s`,
  method: "GET",
  params: {
    part: "snippet",
    id: videoOrChannelId,
    key: secrets.apiKey
  },
});
},{
# const youtubeResponse = await youtubeRequest;
if (youtubeResponse.error) {
  throw new Error("Youtube error");
}

// Checking youtube response if !youtubeResponse.data.items[0] -> Youtube video or channel not found
if (youtubeResponse.data && youtubeResponse.data.items && youtubeResponse.data.items[0]) {
  const description = youtubeResponse.data.items[0].snippet.description.toLowerCase();
  const walletIndex = description.indexOf(ownerWalletAddress.toLowerCase());
  // If it found owner wallet address return 1, otherwise 0
  const resultInt = walletIndex !== -1 ? 1 : 0;
  return Functions.encodeUint256(resultInt);
} else {
  throw new Error("Youtube video or channel not found");
}
// End Function

/*** Show:  Inherited  Protected  Private  Deprecated
File:AbstractPlugin.js
/*
 * AbstractPlugin
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 *
 * Copyright (c) 2012 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
},{
 
// namespace:
this.createjs = this.createjs || {};
 
(function () {
	"use strict";
 
// constructor:
 	/**
	 * A default plugin class used as a base for all other plugins.
	 * @class AbstractPlugin
	 * @constructor
	 * @since 0.6.0
	 */
 
	var AbstractPlugin = function () {
	// private properties:
		/**
		 * The capabilities of the plugin.
		 * method and is used internally.
		 * @property _capabilities
		 * @type {Object}
		 * @default null
		 * @protected
		 * @static
		 */
		this._capabilities = null;
 
		/**
		 * Object hash indexed by the source URI of all created loaders, used to properly destroy them if sources are removed.
		 * @type {Object}
		 * @protected
		 */
		this._loaders = {};
 
		/**
		 * Object hash indexed by the source URI of each file to indicate if an audio source has begun loading,
		 * is currently loading, or has completed loading.  Can be used to store non boolean data after loading
		 * is complete (for example arrayBuffers for web audio).
		 * @property _audioSources
		 * @type {Object}
		 * @protected
		 */
		this._audioSources = {};
 
		/**
		 * Object hash indexed by the source URI of all created SoundInstances, updates the playbackResource if it loads after they are created,
		 * and properly destroy them if sources are removed
		 * @type {Object}
		 * @protected
		 */
		this._soundInstances = {};
 
		/**
		 * The internal master volume value of the plugin.
		 * @property _volume
		 * @type {Number}
		 * @default 1
		 * @protected
		 */
		this._volume = 1;
 
		/**
		 * A reference to a loader class used by a plugin that must be set.
		 * @type {Object}
		 * @protected
		 */
		this._loaderClass;
 
		/**
		 * A reference to an AbstractSoundInstance class used by a plugin that must be set.
		 * @type {Object}
		 * @protected;
		 */
		this._soundInstanceClass;
	};
	var p = AbstractPlugin.prototype;
 },{
// Static Properties:
// NOTE THESE PROPERTIES NEED TO BE ADDED TO EACH PLUGIN
	/**
	 * The capabilities of the plugin. This is generated via the _generateCapabilities method and is used internally.
	 * @property _capabilities
	 * @type {Object}
	 * @default null
	 * @private
	 * @static
	 */
	AbstractPlugin._capabilities = null;
 
	/**
	 * Determine if the plugin can be used in the current browser/OS.
	 * @method isSupported
	 * @return {Boolean} If the plugin can be initialized.
	 * @static
	 */
	AbstractPlugin.isSupported = function () {
		return true;
	};
 
 
// public methods:
	/**
	 * Pre-register a sound for preloading and setup. This is called by {{#crossLink "Sound"}}{{/crossLink}}.
	 * Note all plugins provide a <code>Loader</code> instance, which <a href="http://preloadjs.com" target="_blank">PreloadJS</a>
	 * can use to assist with preloading.
	 * @method register
	 * @param {String} loadItem An Object containing the source of the audio
	 * Note that not every plugin will manage this value.
	 * @return {Object} A result object, containing a "tag" for preloading purposes.
	 */
	p.register = function (loadItem) {
		var loader = this._loaders[loadItem.src];
		if(loader && !loader.canceled) {return this._loaders[loadItem.src];}	// already loading/loaded this, so don't load twice
		// OJR potential issue that we won't be firing loaded event, might need to trigger if this is already loaded?
		this._audioSources[loadItem.src] = true;
		this._soundInstances[loadItem.src] = [];
		loader = new this._loaderClass(loadItem);
		loader.on("complete", this._handlePreloadComplete, this);
		this._loaders[loadItem.src] = loader;
		return loader;
	};
 
	// note sound calls register before calling preload
	/**
	 * Internally preload a sound.
	 * @method preload
	 * @param {Loader} loader The sound URI to load.
	 */
	p.preload = function (loader) {
		loader.on("error", this._handlePreloadError, this);
		loader.load();
	};
 
	/**
	 * Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,
	 * or has already finished loading.
	 * @method isPreloadStarted
	 * @param {String} src The sound URI to check.
	 * @return {Boolean}
	 */
	p.isPreloadStarted = function (src) {
		return (this._audioSources[src] != null);
	};
 
	/**
	 * Checks if preloading has finished for a specific source.
	 * @method isPreloadComplete
	 * @param {String} src The sound URI to load.
	 * @return {Boolean}
	 */
	p.isPreloadComplete = function (src) {
		return (!(this._audioSources[src] == null || this._audioSources[src] == true));
	};
 
	/**
	 * Remove a sound added using {{#crossLink "WebAudioPlugin/register"}}{{/crossLink}}. Note this does not cancel a preload.
	 * @method removeSound
	 * @param {String} src The sound URI to unload.
	 */
	p.removeSound = function (src) {
		if (!this._soundInstances[src]) { return; }
		for (var i = this._soundInstances[src].length; i--; ) {
			var item = this._soundInstances[src][i];
			item.destroy();
		}
		delete(this._soundInstances[src]);
		delete(this._audioSources[src]);
		if(this._loaders[src]) { this._loaders[src].destroy(); }
		delete(this._loaders[src]);
	};
 
	/**
	 * Remove all sounds added using {{#crossLink "WebAudioPlugin/register"}}{{/crossLink}}. Note this does not cancel a preload.
	 * @method removeAllSounds
	 * @param {String} src The sound URI to unload.
	 */
	p.removeAllSounds = function () {
		for(var key in this._audioSources) {
			this.removeSound(key);
		}
	};
 
	/**
	 * Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.
	 * @method create
	 * @param {String} src The sound source to use.
	 * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.
	 * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.
	 * @return {AbstractSoundInstance} A sound instance for playback and control.
	 */
	p.create = function (src, startTime, duration) {
		if (!this.isPreloadStarted(src)) {
			this.preload(this.register(src));
		}
		var si = new this._soundInstanceClass(src, startTime, duration, this._audioSources[src]);
		if(this._soundInstances[src]){
			this._soundInstances[src].push(si);
		}
 
		// Plugins that don't have a setVolume should implement a setMasterVolume/setMasterMute
		// So we have to check that here.
		si.setMasterVolume && si.setMasterVolume(createjs.Sound.volume);
		si.setMasterMute && si.setMasterMute(createjs.Sound.muted);
 
		return si;
	};
 
	// if a plugin does not support volume and mute, it should set these to null
	/**
	 * Set the master volume of the plugin, which affects all SoundInstances.
	 * @method setVolume
	 * @param {Number} value The volume to set, between 0 and 1.
	 * @return {Boolean} If the plugin processes the setVolume call (true). The Sound class will affect all the
	 * instances manually otherwise.
	 */
	p.setVolume = function (value) {
		this._volume = value;
		this._updateVolume();
		return true;
	};
 
	/**
	 * Get the master volume of the plugin, which affects all SoundInstances.
	 * @method getVolume
	 * @return {Number} The volume level, between 0 and 1.
	 */
	p.getVolume = function () {
		return this._volume;
	};
 
	/**
	 * Mute all sounds via the plugin.
	 * @method setMute
	 * @param {Boolean} value If all sound should be muted or not. Note that plugin-level muting just looks up
	 * the mute value of Sound {{#crossLink "Sound/muted:property"}}{{/crossLink}}, so this property is not used here.
	 * @return {Boolean} If the mute call succeeds.
	 */
	p.setMute = function (value) {
		this._updateVolume();
		return true;
	};
 
	// plugins should overwrite this method
	p.toString = function () {
		return "[AbstractPlugin]";
	};
 },{
 // private methods:
	/**
	 * Handles internal preload completion.
	 * @method _handlePreloadComplete
	 * @param event
	 * @protected
	 */
	p._handlePreloadComplete = function (event) {
		var src = event.target.getItem().src,
				result = event.result,
				instances = this._soundInstances[src];
		this._audioSources[src] = result;
 
		if (instances != null && instances.length > 0) {
			for (var i=0, l=instances.length; i<l; i++) {
				instances[i].playbackResource = result;
				// TODO consider adding play call here if playstate == playfailed
				// LM: SoundJS policy is not to play sounds late that previously failed, as it could play unexpectedly.
			}
		}
		this._soundInstances[src] = null;
	};
 
	/**
	 * Handles internal preload errors
	 * @method _handlePreloadError
	 * @param event
	 * @protected
	 */
	p._handlePreloadError = function(event) {
		//delete(this._audioSources[src]); //LM: Not sure why this was commented out.
	};
 
	/**
	 * Set the gain value for master audio. Should not be called externally.
	 * @method _updateVolume
	 * @protected
	 */
	p._updateVolume = function () {
		// Plugin Specific code
	};
 
	createjs.AbstractPlugin = AbstractPlugin;
}());

/** 
# name: Django CIon
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
  # python manage.py test 
"runSettings": 
    "temperature": 1.0,
    "model": "models/gemma-2-27b-it",
    "top": 0.95,
    "maxOutputTokens": 8192,
    "safetySettings": [{
      "category": "HARM_CATEGORY_HARASSMENT",
      "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    }, {
      "category": "HARM_CATEGORY_HATE_SPEECH",
      "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    }, {
      "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
      "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    }, {
      "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
      "threshold": "BLOCK_MEDIUM_AND_ABOVE"
    }],
    "responseMimeType": "text/plain",
    "enableCodeExecution": false,
    "enableEnhancedCivicAnswers": true,
    "enableSearchAsATool": false,
    "enableBrowseAsATool": false,
    "enableAutoFunctionResponse": false
  },
  "citations": [{
    "text": "n sugar\",\n      \"2 teaspoons pure vanilla extract\",\n      \"2 large eggs\",\n      \"2 1/4 cups all-purpose flour\",\n      \"1 teaspoon baking soda\",\n      \"1 teaspoon salt\"",
    "uri": "https://www.oklikshare.com/2023/07/cookies-recipe-preppy-kitchen-2023.html"
  }, {
    "text": "ned.\",\n      \"Stir in the chocolate chips.\",\n      \"Drop by rounded tablespoons onto ungreased baking sheets.\",\n      \"Bake for ",
    "uri": "https://github.com/frdrck100/To_Do_Assignments"
  }, {
    "text": "each ball with a fork, making a criss-cross pattern.\","
  }],
  "systemInstruction": {
  },
  "chunkedPrompt": {
    "chunks": [{
      "text": "Generate a list of cookie recipes. Make the outputs in JSON format.",
      "role": "user",
      "tokenCount": 15
    }, {
      "text": "```json\n[\n  {\n    \"name\": \"Classic Chocolate Chip Cookies\",\n    \"ingredients\": [\n      \"1 cup (2 sticks) unsalted butter, softened\",\n      \"3/4 cup granulated sugar\",\n      \"3/4 cup packed brown sugar\",\n      \"2 teaspoons pure vanilla extract\",\n      \"2 large eggs\",\n      \"2 1/4 cups all-purpose flour\",\n      \"1 teaspoon baking soda\",\n      \"1 teaspoon salt\",\n      \"2 cups chocolate chips\"\n    ],\n    \"instructions\": [\n      \"Preheat oven to 375 degrees F (190 degrees C).\",\n      \"Cream together the butter, granulated sugar, and brown sugar until light and fluffy.\",\n      \"Beat in the vanilla and eggs until well combined.\",\n      \"In a separate bowl, whisk together the flour, baking soda, and salt.\",\n      \"Gradually add the dry ingredients to the wet ingredients, mixing until just combined.\",\n      \"Stir in the chocolate chips.\",\n      \"Drop by rounded tablespoons onto ungreased baking sheets.\",\n      \"Bake for 9-11 minutes, or until golden brown.\",\n      \"Let cool on baking sheets for a few minutes before transferring to a wire rack to cool completely.\"\n    ]\n  },\n  {\n    \"name\": \"Peanut Butter Cookies\",\n    \"ingredients\": [\n      \"1 cup peanut butter\",\n      \"1/2 cup granulated sugar\",\n      \"1/2 cup packed brown sugar\",\n      \"1 large egg\",\n      \"1 teaspoon vanilla extract\",\n      \"1/2 teaspoon baking soda\",\n      \"1/4 teaspoon salt\"\n    ],\n    \"instructions\": [\n      \"Preheat oven to 375 degrees F (190 degrees C).\",\n      \"In a large bowl, cream together the peanut butter, granulated sugar, and brown sugar until smooth.\",\n      \"Beat in the egg and vanilla extract.\",\n      \"In a separate bowl, whisk together the baking soda and salt.\",\n      \"Gradually add the dry ingredients to the wet ingredients, mixing until just combined.\",\n      \"Roll dough into 1-inch balls and place on ungreased baking sheets.\",\n      \"Flatten each ball with a fork, making a criss-cross pattern.\",\n      \"Bake for 8-10 minutes, or until lightly golden brown.\",\n      \"Let cool on baking sheets for a few minutes before transferring to a wire rack to cool completely.\"\n    ]\n  },\n  {\n    \"name\": \"Snickerdoodles\",\n    \"ingredients\": [\n      \"1 cup (2 sticks) unsalted butter, softened\",\n      \"1 1/2 cups granulated sugar\",\n      \"2 large eggs\",\n      \"2 3/4 cups all-purpose flour\",\n      \"2 teaspoons cream of tartar\",\n      \"1 teaspoon baking soda\",\n      \"1/4 teaspoon salt\",\n      \"2 tablespoons granulated sugar\",\n      \"2 teaspoons ground cinnamon\"\n    ],\n    \"instructions\": [\n      \"Preheat oven to 400 degrees F (200 degrees C).\",\n      \"Cream together the butter and sugar until light and fluffy.\",\n      \"Beat in the eggs one at a time.\",\n      \"In a separate bowl, whisk together the flour, cream of tartar, baking soda, and salt.\",\n      \"Gradually add the dry ingredients to the wet ingredients, mixing until just combined.\",\n      \"In a small bowl, combine the 2 tablespoons of sugar and the cinnamon.\",\n      \"Roll dough into 1-inch balls and then roll in the cinnamon-sugar mixture.\",\n      \"Place on ungreased baking sheets.\",\n      \"Bake for 8-10 minutes, or until lightly golden brown.\",\n      \"Let cool on baking sheets for a few minutes before transferring to a wire rack to cool completely.\"\n    ]\n  },\n  {\n    \"name\": \"Oatmeal Raisin Cookies\",\n    \"ingredients\": [\n      \"1 cup (2 sticks) unsalted butter, softened\",\n      \"3/4 cup granulated sugar\",\n      \"3/4 cup packed brown sugar\",\n      \"2 large eggs\",\n      \"1 teaspoon vanilla extract\",\n      \"1 1/2 cups all-purpose flour\",\n      \"1 teaspoon baking soda\",\n      \"1 teaspoon ground cinnamon\",\n      \"1/2 teaspoon salt\",\n      \"3 cups old-fashioned oats\",\n      \"1 cup raisins\"\n    ],\n    \"instructions\": [\n      \"Preheat oven to 375 degrees F (190 degrees C).\",\n      \"Cream together the butter, granulated sugar, and brown sugar until light and fluffy.\",\n      \"Beat in the eggs one at a time, then stir in the vanilla.\",\n      \"In a separate bowl, whisk together the flour, baking soda, cinnamon, and salt.\",\n      \"Gradually add the dry ingredients to the wet ingredients, mixing until just combined.\",\n      \"Stir in the oats and raisins.\",\n      \"Drop by rounded tablespoons onto ungreased baking sheets.\",\n      \"Bake for 10-12 minutes, or until golden brown.\",\n      \"Let cool on baking sheets for a few minutes before transferring to a wire rack to cool completely.\"\n    ]\n  }\n]\n```",
      "role": "model",
      "finishReason": "true",
      "tokenCount": 1153
    }, {
      "text": "hexllm_args \u003d [\n    \"--host\u003d0.0.0.0\",\n    \"--port\u003d7080\",\n    \"--model\u003dmeta-llama/Meta-Llama-3.1-70B\",\n    \"--data_parallel_size\u003d1\",\n    \"--tensor_parallel_size\u003d16\",\n    \"--num_hosts\u003d4\",\n    \"--hbm_utilization_factor\u003d0.9\",\n]\n\nmodel \u003d aiplatform.Model.upload(\n    display_name\u003dmodel_name,\n    serving_container_image_uri\u003dHEXLLM_DOCKER_URI,\n    serving_container_command\u003d[\"python\", \"-m\", \"hex_llm.server.api_server\"],\n    serving_container_args\u003dhexllm_args,\n    serving_container_ports\u003d[7080],\n    serving_container_predict_route\u003d\"/generate\",\n    serving_container_health_route\u003d\"/ping\",\n    serving_container_environment_variables\u003denv_vars,\n    serving_container_shared_memory_size_mb\u003d(16 * 1024),  # 16 GB\n    serving_container_deployment_timeout\u003d7200,\n    location\u003dTPU_DEPLOYMENT_REGION,\n)\n\nmodel.deploy(\n    endpoint\u003dendpoint,\n    machine_type\u003dmachine_type,\n    tpu_topology\u003d\"4x4\",\n    deploy_request_timeout\u003d1800,\n    service_account\u003dservice_account,\n    min_replica_count\u003dmin_replica_count,\n    max_replica_count\u003dmax_replica_count,\n)",
      "role": "user",
      "tokenCount": 375
    }, {
      "text": "This code snippet demonstrates deploying a large language model (LLM) using Google Cloud AI Platform and the HexLLM framework. Let\u0027s break down the code step by step:\n\n**1. Model Upload:**\n\n* `aiplatform.Model.upload(...)`: This line uploads the trained LLM model to Google Cloud AI Platform.\n\n* `display_name\u003dmodel_name`: Sets a user-friendly name for the model.\n\n* `serving_container_image_uri\u003dHEXLLM_DOCKER_URI`: Specifies the Docker image containing the HexLLM server.\n\n* `serving_container_command\u003d[\"python\", \"-m\", \"hex_llm.server.api_server\"]`: Defines the command to run within the Docker container to start the HexLLM API server.\n\n* `serving_container_args\u003dhexllm_args`: Passes arguments to the HexLLM server, configuring its behavior:\n    * `--host\u003d0.0.0.0`: Makes the server listen on all available network interfaces.\n    * `--port\u003d7080`: Sets the port for the server to listen on.\n    * `--model\u003dmeta-llama/Meta-Llama-3.1-70B`: Specifies the LLM model to use (Meta-Llama 3.1-70B in this case).\n    * `--data_parallel_size\u003d1`, `--tensor_parallel_size\u003d16`: Configures data and tensor parallelism for distributed training/inference.\n    * `--num_hosts\u003d4`: Indicates the number of hosts involved in distributed training/inference.\n    * `--hbm_utilization_factor\u003d0.9`: Sets the utilization factor for High Bandwidth Memory (HBM).\n\n* `serving_container_ports\u003d[7080]`: Exposes port 7080 for communication with the API server.\n\n* `serving_container_predict_route\u003d\"/generate\"`: Defines the route for making prediction requests (generating text).\n\n* `serving_container_health_route\u003d\"/ping\"`: Defines the route for checking the health of the server.\n\n* `serving_container_environment_variables\u003denv_vars`: Sets environment variables for the server.\n\n* `serving_container_shared_memory_size_mb\u003d(16 * 1024)`: Allocates 16 GB of shared memory for the server.\n\n* `serving_container_deployment_timeout\u003d7200`: Sets a timeout for deploying the container.\n\n* `location\u003dTPU_DEPLOYMENT_REGION`: Specifies the Google Cloud region where the model will be deployed.\n\n**2. Model Deployment:**\n\n* `model.deploy(...)`: Deploys the uploaded model to create an endpoint for serving predictions.\n\n* `endpoint\u003dendpoint`: Sets the name of the endpoint.\n\n* `machine_type\u003dmachine_type`: Specifies the type of machine to use for deployment (e.g., a TPU VM).\n\n* `tpu_topology\u003d\"4x4\"`: Configures a 4x4 TPU pod for distributed inference.\n\n* `deploy_request_timeout\u003d1800`: Sets a timeout for the deployment request.\n\n* `service_account\u003dservice_account`: Specifies the service account to use for accessing Google Cloud resources.\n\n* `min_replica_count\u003dmin_replica_count`, `max_replica_count\u003dmax_replica_count`: Sets the minimum and maximum number of replicas for the deployed model.\n\n**Key Points:**\n\n* This code assumes you have already trained the Meta-Llama 3.1-70B model and have the necessary Docker image and environment variables set up.\n* The code leverages HexLLM for efficient inference of large language models, particularly on TPUs.\n* Distributed training/inference is enabled through data and tensor parallelism.\n* The deployment configuration is tailored for a TPU environment.\n\n\n\nLet me know if you have any more questions or would like to explore specific aspects of this code in more detail!",
      "role": "model",
      "finishReason": "true"
    }],
    "pendingInputs": [{
      "text": "",
      "role": "user"
    }]
  }
 }
}
